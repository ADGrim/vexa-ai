// src/components/MobiusVisualizer.tsx
import { useRef, useEffect } from 'react';
import * as THREE from 'three';

interface MobiusVisualizerProps {
  active: boolean;
}

export default function MobiusVisualizer({ active }: MobiusVisualizerProps) {
  const mountRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!active || !mountRef.current) return;

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    mountRef.current.appendChild(renderer.domElement);

    const mobius = new THREE.ParametricGeometry((u, t, target) => {
      u *= Math.PI * 2;
      t = t * 2 - 1;
      const x = (1 + 0.5 * t * Math.cos(u / 2)) * Math.cos(u);
      const y = (1 + 0.5 * t * Math.cos(u / 2)) * Math.sin(u);
      const z = 0.5 * t * Math.sin(u / 2);
      target.set(x, y, z);
    }, 80, 10);

    const material = new THREE.MeshStandardMaterial({
      color: 0xffffff,
      metalness: 0.7,
      roughness: 0.1,
      wireframe: false,
      side: THREE.DoubleSide
    });

    const mobiusMesh = new THREE.Mesh(mobius, material);
    scene.add(mobiusMesh);

    const particleGeometry = new THREE.BufferGeometry();
    const particleCount = 2000;
    const positions = new Float32Array(particleCount * 3);

    for (let i = 0; i < particleCount * 3; i++) {
      positions[i] = (Math.random() - 0.5) * 4;
    }

    particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    const particleMaterial = new THREE.PointsMaterial({ color: 0xffffff, size: 0.01 });
    const particles = new THREE.Points(particleGeometry, particleMaterial);
    scene.add(particles);

    const light = new THREE.PointLight(0xffffff, 1);
    light.position.set(5, 5, 5);
    scene.add(light);

    camera.position.z = 4;

    const animate = () => {
      requestAnimationFrame(animate);
      mobiusMesh.rotation.x += 0.002;
      mobiusMesh.rotation.y += 0.004;
      particles.rotation.y += 0.001;
      renderer.render(scene, camera);
    };

    animate();

    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };

    window.addEventListener('resize', handleResize);

    return () => {
      mountRef.current?.removeChild(renderer.domElement);
      window.removeEventListener('resize', handleResize);
    };
  }, [active]);

  return (
    <div
      ref={mountRef}
      style={{
        position: 'absolute',
        inset: 0,
        zIndex: 10,
        display: active ? 'block' : 'none',
        background: 'transparent',
        pointerEvents: 'none',
      }}
    />
  );
}
